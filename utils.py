import json
from api_integrations.translate_api import translate
from cv_and_pdf import read_pdf_pages, process_pdf
from aiogram.filters import BaseFilter
from aiogram.filters.state import State, StatesGroup
import os
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery, FSInputFile, User
from aiogram import Bot
from datetime import datetime
from aiogram.types import BotCommand
from config import config
from settings import commands, users_data


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TKN = config.BOT_TOKEN
bot_func: Bot = Bot(token=TKN)


# –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
def get_pers_info(user: str, key: str):
    path = f'{users_data}/{user}.json'
    if os.path.exists(path):
        # –ø—Ä–æ—á–∏—Ç–∞—Ç—å –±–¥
        with open(path, 'r', encoding='utf-8') as f:
            user_data: dict = json.load(f)
    else:
        user_data: dict = {}
    value = user_data.get(key)
    return value


# –∑–∞–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
def set_pers_info(user: str, key: str, val):
    path = f'{users_data}/{user}.json'

    if os.path.exists(path):
        # –ø—Ä–æ—á–∏—Ç–∞—Ç—å –±–¥
        with open(path, 'r', encoding='utf-8') as f:
            user_data: dict = json.load(f)
    else:
        user_data: dict = {}
    old_val = user_data.get(key)

    # —Å–æ—Ö—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    user_data[key] = val
    with open(path, 'w', encoding='utf-8') as f:
        json.dump(user_data, f, indent=2, ensure_ascii=False)
    print(user, f'{key}: {old_val} => {val}')


# —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–≥-—Ñ–∞–π–ª–∞
async def download_link_by_id(file_id: str) -> str:
    file_info = await bot_func.get_file(file_id)
    file_url = file_info.file_path
    url = f'https://api.telegram.org/file/bot{TKN}/{file_url}'
    return url


# –§–∏–ª—å—Ç—Ä, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –¥–æ—Å—Ç—É–ø —é–∑–µ—Ä–∞
class Access(BaseFilter):
    # —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ id
    def __init__(self, access: list[str]) -> None:
        self.access = access

    # –≤–µ—Ä–Ω—É—Ç—å True –µ—Å–ª–∏ —é–∑–µ—Ä –≤ —Å–ø–∏—Å–∫–µ
    async def __call__(self, message: Message) -> bool:
        user_id_str = str(message.from_user.id)
        return user_id_str in self.access


# –§–∏–ª—å—Ç—Ä, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ —Å–ø–∏—Å–∫—É
class InMenuList(BaseFilter):
    # —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ —Å–ª–æ–≤–∞–º–∏
    def __init__(self, array: list[str]) -> None:
        self.array = array

    async def __call__(self, message: Message) -> bool:
        return message.text in self.array


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –±–æ—Ç –≤ —Ä–∞–∑–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —é–∑–µ—Ä–æ–º
class FSM(StatesGroup):
    put_text = State()
    put_sign = State()
    wait_pdf = State()
    wait_lang = State()
    wait_page = State()  # –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    wait_languages = State()  # –≤–≤–æ–¥ —è–∑—ã–∫–æ–≤


# –∑–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ tsv, –∫–æ–Ω—Å–æ–ª—å
async def log(file, key, item):
    t = str(datetime.now()).split('.')[0]
    log_text = '\t'.join((t, str(key), repr(item)))

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ tsv
    try:
        with open(file, 'a', encoding='utf-8') as f:
            print(log_text, file=f)
    except Exception as e:
        log_text += f'\nüî¥–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ tsv:\n{e}'

    # –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    print(log_text)


# –∞–π–¥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
def id_from_text(text: str) -> str:
    user_id = ''
    for word in text.split():
        if word.lower().startswith('id'):
            for symbol in word:
                if symbol.isnumeric():
                    user_id += symbol
            break
    return user_id


# –Ω–∞–ø–∏—Å–∞—Ç—å –∏–º—è –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —é–∑–µ—Ä–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –±–µ–∑ username
def contact_user(user: User) -> str:
    tg_url = f'<a href="tg://user?id={user.id}">{user.full_name}</a>'
    text = f'{tg_url} id{user.id} @{user.username}'
    return text


# –∏–∑–º–µ–Ω–∏—Ç—å –ø–¥—Ñ –∏ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Ñ–æ—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
def render_pdf_page(user: str) -> FSInputFile:
    # –ø—É—Ç—å –ø–¥—Ñ
    raw_pdf_path = f'{users_data}/{user}_raw.pdf'
    # –ø—É—Ç—å –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω–æ–π —Ñ–æ—Ç–∫–∏
    tmp_jpg = f'{users_data}/{user}_tmp.jpg'

    # –∑–∞–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
    coord = get_pers_info(user, 'coord')
    if coord is None:
        coord = {"x0": 200, "y0": 200, "x1": 300, "y1": 300}
        set_pers_info(user, key='coord', val=coord)
    # –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ë–î
    coord = get_pers_info(user=user, key='coord')
    page = get_pers_info(user=user, key='page')
    if not page:
        page = 0

    # —à—Ä–∏—Ñ—Ç
    font = get_pers_info(user=user, key='font')
    if not font:
        font = 30

    # —Ä–µ–∂–∏–º - —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å
    mode = get_pers_info(user, key='mode')
    sign_path = put_text = None
    if mode == 'sign':
        sign_path = f'{users_data}/{user}_transp.png'
        put_text = None
    elif mode == 'text':
        sign_path = None
        put_text = get_pers_info(user, key='put_text')

    process_pdf(image_path=sign_path, put_text=put_text, xyz=coord, temp_jpg_path=tmp_jpg, font=font,
                pdf_path=raw_pdf_path, page=page)

    return FSInputFile(tmp_jpg)


# –∑–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤–æ–¥–∞
def trans(user: str) -> (FSInputFile, FSInputFile, ):
    lang_pair = get_pers_info(user, key='lang_pair').split()
    read_mode = get_pers_info(user, key='read_mode')

    # —á—Ç–µ–Ω–∏–µ –ø–¥—Ñ
    raw_pdf_path = f'{users_data}/{user}_raw.pdf'
    text_path = f'{users_data}/{user}_text_from_pdf.txt'
    render_tmp_path = f'{users_data}/{user}_ocr_tmp.png'
    read_pdf_pages(raw_pdf_path, text_path, read_mode=read_mode, language=lang_pair[0], render_tmp_path=render_tmp_path)

    # –∑–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤–æ–¥–∞
    with open(text_path, 'r', encoding='utf-8') as f:
        # —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏
        to_translate = f.read()
    translation = translate(query=to_translate, target=lang_pair[1])

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –ø–¥—Ñ
    file_translated = f'{users_data}/{user}_translated.txt'
    with open(file_translated, 'w', encoding='utf-8') as f:
        print(translation, file=f)

    return FSInputFile(text_path), FSInputFile(file_translated)
